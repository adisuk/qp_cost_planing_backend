type Query {
	currentUser: User
	user(id: String!): User
	users: [User]
	usersPagination(filter: String, pageSize: Int, currentPage: Int, orderBy: UserOrderByInput!): UserPagination!
}

type Mutation {
	createUser(payload: UserInput): User!
	updateUser(id: ID!, payload: UserInput): User!
	deleteUser(id: ID!): User!
}

enum UserOrderByInput {
	name_asc
	name_desc
	email_asc
	email_desc
	createdAt_desc
	createdAt_asc
}

type UserPagination {
	nodes: [User]
	pageInfo: PaginationInfo!
}

input UserInput {
    role: RoleInput!
    prefix: PrefixInput
    name: String!
    surname: String!
    username: String!
    email: String!
}

type User {
    id: String!
    photo: String
    role: Role
    prefix: Prefix
    name: String!
    surname: String
    username: String!
    email: String!
    accessFailedCount: Int!
    oneTimePassword: String!
    oneTimePasswordReset: Boolean!
    resetKey: String!
    menus: [Menu]
    status: Status!
    isDeleted: Boolean!
	createdAt: String!
	updatedAt: String!
	createdBy: User
	updatedBy: User
}

